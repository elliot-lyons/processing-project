Table covidData;
TableRow covidRow;

PImage blankUSMap;
PFont ArialMtTwelve;
PFont ArialMtEight;
PFont ArialMtTen;
PFont ArialBoldItalicMtTwenty;
PFont ArialBoldItalicMtSixteen;
PFont ArialBoldItalicMtEight;
PFont ArialMtTwenty;
PFont ArialMtSixteen;

ArrayList totalList;
covidDataRow dataRow;
String[] allMonths;

String inFile;
public static int currentScreen;
public static boolean graphNeeded;
public static int monthNeeded;
private static boolean breakdownNeeded;
private static String breakdownDate;

DateGraph aDateGraph;
homeScreen theHomeScreen;
ArrayList widgetList;
ArrayList theDays;                                                  
ArrayList theStates;
String[] theDaysArray;                                                  
DateBreakdown aDateBreakdown;

void settings()
{
  size(SCREEN_X, SCREEN_Y);
}

void setup()
{
  inFile = "cases1m.csv";
  covidData = loadTable(inFile, "header");
  totalList = new ArrayList();

  ArialMtTwelve = loadFont("ArialMT-12.vlw");
  textFont(ArialMtTwelve);
  ArialMtEight =loadFont("ArialMT-8.vlw");
  ArialMtTen = loadFont("ArialMT-10.vlw");
  ArialBoldItalicMtTwenty = loadFont("Arial-BoldItalicMT-20.vlw");
  ArialBoldItalicMtSixteen = loadFont("Arial-BoldItalicMT-16.vlw");
  ArialBoldItalicMtEight = loadFont("Arial-BoldItalicMT-8.vlw");
  ArialMtTwenty = loadFont("ArialMT-20.vlw");
  ArialMtSixteen = loadFont("ArialMT-16.vlw");

  blankUSMap = loadImage("BlankUSMap.png");
  currentScreen = HOME_SCREEN;                  // should be home screen
  graphNeeded = false;
  breakdownNeeded = false;                      // needs to be false
  breakdownDate = "";

  allMonths = new String[TOTAL_MONTHS];
  fillMonths(allMonths);

  for (int i = 0; i < covidData.getRowCount(); i++) 
  {
    covidRow = covidData.getRow(i);

    dataRow = new covidDataRow(covidRow);
    totalList.add(dataRow);
  }
  
  theStates = new ArrayList();
  fillStates(totalList, theStates);

  theHomeScreen = new homeScreen(currentScreen);
}

void draw()
{
  switch(currentScreen) {
  case HOME_SCREEN:
    theHomeScreen.draw();
    break;
    
  case MONTH_SCREEN:
    if (graphNeeded)
    {
      aDateGraph = new DateGraph(totalList, allMonths);
      graphNeeded = false;
    }
    aDateGraph.draw();
    break;
    
   case DAILY_SCREEN:
   if (graphNeeded)
   {
      theDays = new ArrayList();
      fillDays(allMonths[monthNeeded], theDays);                          
      theDaysArray = stringListToArray(theDays);
      aDateGraph = new DateGraph(totalList, theDaysArray);
      graphNeeded = false;
   }
   aDateGraph.draw();
   break;
   
   case DATE_BREAKDOWN_SCREEN:
   {
     if (breakdownNeeded)
     {
       aDateBreakdown = new DateBreakdown(totalList, breakdownDate, theStates);                    // for debugging, need to figure out how to pass a specific string
       breakdownNeeded = false;
     }
     
     aDateBreakdown.draw();
     break;
   }
  }

}

void mousePressed() {
  if (currentScreen == MONTH_SCREEN)
  {
    aDateGraph.checkBarPress();
  }
  
  if (currentScreen == MONTH_SCREEN || currentScreen == DAILY_SCREEN)
  {
    aDateGraph.backMp = true;
  }
  
  theHomeScreen.whenMousePressed();
}
void mouseMoved() {
  theHomeScreen.whenMouseMoved(mouseX, mouseY);
}

void fillMonths(String[] months)
{
  int yearsRequired = months.length / 12;

  if (months.length % 12 > 0)
  {
    yearsRequired++;                                                                                                  // this adds another year on if there are extra months
  }

  int currentYear = START_YEAR;
  yearsRequired += currentYear;
  int i = 0;

  while (currentYear < yearsRequired)                                                                                
  {
    for (int currentMonth = 1; currentMonth <= 12 && i < months.length; currentMonth++)
    {
      String selectedMonth = "" + (currentMonth < 10 ? "0" + currentMonth: + currentMonth) + "/" + currentYear;
      months[i] = selectedMonth;                                                                                      // this stores the month in the allMonth String in the format
      i++;                                                                                                            // MM/YY
    }
    currentYear++;                                                                                                    // the for loop concludes when all the months have been done for one year
  }                                                                                                                   // the while loop concludes when all the years have been covered
}

void fillDays(String month, ArrayList<String> myList)                                                 // creates an ArrayList for a specific month
{
  String currentDay = "";
  int dayLimit = 0;

  switch (month)
  {
  case "02/21":
    dayLimit = 28;
    break;

  case "02/20":
    dayLimit = 29;
    break;

  case "04/20":
  case "06/20":
  case "09/20":
  case "11/20":
    dayLimit = 30;
    break;

  default:
    dayLimit = 31;
    break;
  }

  for (int i = 1; i < dayLimit; i++)
  {
    currentDay = (i < 10 ? "0" + i : "" + i) + "/" + month;
    myList.add(currentDay);
  }
}

void fillStates(ArrayList<covidDataRow> theList, ArrayList<String> myList)
{
  String currentState = "";
  covidDataRow currentRow; 
  boolean needsAdding = true;
  
  for (int i = 0; i < theList.size(); i++)
  {
    currentRow = theList.get(i);
    currentState = currentRow.state;
    
    for (int j = 0; j < myList.size(); j++)
    {
      if (currentState.equals(myList.get(j)))
      {
        needsAdding = false;
      }
    }
    
    if (needsAdding)
    {
      myList.add(currentState);
    }
    
    needsAdding = true;
  }
      
}

String[] stringListToArray(ArrayList<String> myList)                            // turns an ArrayList of Strings into a String array
{
  String[] theArray = new String[myList.size()];

  for (int i = 0; i < myList.size(); i++)
  {
    theArray[i] = myList.get(i);
  }

  return theArray;
}
