class HeatMap {

  int screen;
  ArrayList widgetList;
  private boolean backMp;
  color minColour, maxColour; // heatmap colour palette
  float dataMax;
  String State_Name;
  String state_Name;
  private String state;
  int noOfCases;
  int addNewCases;

  HashMap<String, Integer> stateCases;
  HashMap<String, Integer> areaCases;

  PieChart aPieChart;

  String stateName;
  int stateId;

  String[] Areas;
  int[] CasesInAreas;
  String[] StateAreaNames;

  int numberOfCases;
  int addMoreCases;
  String areas;

  int i = 0;

  int[] Cases;
  String[] States;
  int CasesNumber;
  String StateNames;

  HeatMap(int screen) { //, Table covidData) {
    this.screen = screen;
    this.casesPerState();
    this.arrayCasesPerState();
    //this.casesPerArea();
    //this.covidData = covidData;
    backMp = false;
  }

  void casesPerState() {

    minColour = color(245, 134, 85);
    maxColour = color(227, 61, 15);


    stateCases = new HashMap<String, Integer>(); // cases within a state
    //areaCases = new HashMap<String, Integer>(); // cases within a specified area
    //println(areaCases);
    //geoMap.writeAttributesAsTable(51); // debugging purposes

    //println(stateCases);
    //println(covidData);
    for (TableRow rowing : covidData.rows()) {
      stateCases.put(rowing.getString(2).toUpperCase(), 0);
    }

    //enter cases per state
    for (TableRow row : covidData.rows()) {
      state = row.getString(2).toUpperCase();
      if (stateCases.containsKey(state)) {
        noOfCases = stateCases.get(state);
        addNewCases = row.getInt(4);
        noOfCases += addNewCases;
        stateCases.put(state, noOfCases);
      }
    }

    for (Map.Entry<String, Integer> me5 : stateCases.entrySet()) {
      dataMax = max(dataMax, me5.getValue());
    }
  }

  void casesPerArea(String namezOfTheArealol) {//String stateName) {
    areaCases = new HashMap<String, Integer>();

    String newNameoFsTateConverted = convertToUpperCamelCase(namezOfTheArealol);
    // test hashmap for specific area
    for (TableRow row : covidData.rows()) {
      //StateCases.put(row.getString(2), 0);
      if (row.getString(2).equals(newNameoFsTateConverted)) { //Deleware//mousePressedonIdOfstate // loop through necessay state
        areaCases.put(row.getString(1), 0);
      }
    }

    //inserts the number of cases per area into hashMap
    for (TableRow row : covidData.rows()) {
      areas = row.getString(1);
      if (areaCases.containsKey(areas)) {
        numberOfCases = areaCases.get(areas);
        addMoreCases = row.getInt(4);
        numberOfCases += addMoreCases;
        areaCases.put(areas, numberOfCases);
      }
    }

    CasesInAreas = new int[areaCases.size()];   // cases in area
    StateAreaNames = new String[areaCases.size()];

    int index2 = 0;
    for (Map.Entry<String, Integer> me2 : areaCases.entrySet()) {
      int theCasesInAreazz = me2.getValue();
      CasesInAreas[index2] = theCasesInAreazz;
      String StateAreaName = me2.getKey();
      StateAreaNames[index2] = StateAreaName;
      index2++;
    }

    //state area names in a string array for pie chart labels


    aPieChart = new PieChart((float) 350, CasesInAreas, StateAreaNames);// call piechart
  }

  void draw() {
    background(255);
    stroke(255);               // Boundary colour
    //println(StateAreaNames);
    strokeWeight(1.5);
    fill(96, 248, 234);
    //handWritten.rect(10, 10, SCREEN_X - 20, SCREEN_Y - 20);

    //println(covidData);
    backButton(mouseX, mouseY);

    //geoMap.writeAttributesAsTable(51); // debugging purposes
    for (int id : geoMap.getFeatures().keySet()) {
      state_Name = geoMap.getAttributeTable().findRow(str(id), 0).getString("State_Name");
      if (stateCases.containsKey(state_Name)) {
        int caseAtState = stateCases.get(state_Name);
        //println(caseAtState);
        //if (caseAtState != 0) {
        //float normStateName = dataRow.getInt(4)/ max;
        float normStateName = caseAtState/dataMax;
        fill (lerpColor(minColour, maxColour, normStateName));
        //println(caseAtState);
      } else {
        fill (255);
      }
      geoMap.draw(id);
    }

    //geoMap.draw();
    fill(21, 60, 220);          // Land colour
    //geoMap.draw();              // Draw map.
    // Find the country at mouse position and draw in different colour.
    stateId = geoMap.getID(mouseX, mouseY);
    if (stateId != -1)
    {
      fill(195, 31, 29);      // Highlighted land colour.
      geoMap.draw(stateId);
      stateName = geoMap.getAttributeTable().findRow(str(stateId), 0).getString("State_Name");    
      fill(0);
      String hihey = convertToUpperCamelCase(stateName);
      text(hihey + ": ", mouseX, mouseY - 20);
      text(stateCases.get(stateName)+" cases", mouseX, mouseY);
    }
    if (mousePressed) {
      int stateID = geoMap.getID(mouseX, mouseY);
      if (stateID != -1) {
        String nameOfState = geoMap.getAttributeTable().findRow(str(stateId), 0).getString("State_Name");
        //println(nameOfState);
        casesPerArea(nameOfState); // call the hashmap to make one for that state with those cases and eras
        aPieChart.draw();
      }
      println(areaCases);
    }
    int x = 50;
    int y = 50;

    for (int i = 0; i < 10; i++) {
      fill(lerpColor(minColour, maxColour, (i + 1 )/ 10));
      rect(x, y +  i * 50, 50, 50);
      fill(0); 
      textAlign(CENTER, CENTER);
      text((i + 1) * 10 + "%", x + 55, y + i * 50, 60, 50);
    }

    mousePressed();
  }
  /*
  void mouseMoved() {
   int stateID = geoMap.getID(mouseX, mouseY);
   if (stateID != -1) {
   String nameOfState = geoMap.getAttributeTable().findRow(str(stateId), 0).getString("State_Name");
   //println(nameOfState);
   casesPerArea(nameOfState); // call the hashmap to make one for that state with those cases and eras
   aPieChart.draw();
   }
   println(areaCases);
   
   {
   fill(195, 31, 29);      // Highlighted land colour.
   geoMap.draw(stateId);
   stateName = geoMap.getAttributeTable().findRow(str(stateId), 0).getString("State_Name");    
   fill(0);
   text(stateName + ": ", mouseX, mouseY - 20);
   text(stateCases.get(stateName)+" cases", mouseX, mouseY);
   }
   }
   */
  void backButton(int mX, int mY)                                                    // this is a back button which lets the user return to the previous screen
  {
    if (mX >= BACK_BUTTON_ORG && mX <= BACK_BUTTON_ORG + BACK_BUTTON_X && mY >= BACK_BUTTON_ORG && mY <= BACK_BUTTON_ORG + BACK_BUTTON_Y) 
    {
      stroke(0);

      if (backMp)
      {  
        currentScreen = HOME_SCREEN;
        backMp = false;
      }
    } else
    {
      stroke(255);
    }

    fill(grey);
    rect(BACK_BUTTON_ORG, BACK_BUTTON_ORG, BACK_BUTTON_X, BACK_BUTTON_Y);

    fill(0);
    textFont(ArialBoldItalicMtTwenty);
    textAlign(CENTER, CENTER);
    text("Back", BACK_BUTTON_ORG, BACK_BUTTON_ORG, BACK_BUTTON_X, BACK_BUTTON_Y);
    textAlign(LEFT, BOTTOM);
    //text("Back", BACK_BUTTON_ORG + 5, BACK_BUTTON_ORG + 25);
  }

  void mousePressed() {
  }

  void arrayCasesPerState() {
    Cases = new int[stateCases.size()];   //cases per state
    States = new String[stateCases.size()];   //states
    int i = 0;

    for (Map.Entry<String, Integer> me : stateCases.entrySet()) {
      //for (int k = 0; k < StateCases.size(); k++) {
      CasesNumber = me.getValue();
      //println(CasesNumber);
      Cases[i] = CasesNumber;
      StateNames = me.getKey();
      States[i] = StateNames;
      //println(StateNames);
      i++;
    }

    //convert int[] cases per state into float[] to be used for pie chart
    float[] floatCases = new float[stateCases.size()];
    int index = 0;
    for (final Integer value : Cases) {
      floatCases[index] = value;
      index++;
    }
  }

  String convertToUpperCamelCase(String stringToBeConverted) {
    if (stringToBeConverted == null || stringToBeConverted.isEmpty()) {
      return stringToBeConverted;
    }

    StringBuilder converted = new StringBuilder();
    boolean convertToUpper = true;
    for (char ch : stringToBeConverted.toCharArray()) {
      if (Character.isSpaceChar(ch)) {
        convertToUpper = true;
      } else if (convertToUpper) {
        ch = Character.toTitleCase(ch);
        convertToUpper = false;
      } else {
        ch = Character.toLowerCase(ch);
      }
      converted.append(ch);
    }
    return converted.toString();
  }
}
